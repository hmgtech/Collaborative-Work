Foreward






Introduction
The introduction starts with an image of two doors inside of which the code quality is being judged. Robert Martin asks the reader which door would represent your code?
He goes on to giving the solution to "How to wind up behind the right door?". The answer according to him is "Craftsmanship". Knowledge and Work are the two parts of
craftmanship.He explains this with a simple example. Learning to ride a bicycle. A person could know all the physics fundamentals going into riding a bicycle and still
fall down the first time he tries to actually ride the bicycle. Coding is NO DIFFERENT. He goes on to give a brief summary of the book. He divides the book in 3 phases.
The first several chapters focusing on various coding practices to follow. The second phase consists of exercises where the reader has to transform a given code too reduce 
the number of problems present in the code. The last chapter is a Payoff as described by him. It contains all the heuristics and smells that we encountered while solving 
the second phase. This will build a knowledge base worth holding on while coding.





Chapter 1 (Hinal)
1. Code represents the details of the requirements
2. Specifying requirements in details that a machine can execute them is called programming. The specification is code
3. Bad code can bring company down
4. Wading through bad code
5. Later equals never
6. Only way to go fast is to keep the code clean
7. code-sense is important
8. Thoughts about clean code:
  Bjarne Stroustrup (C++ inventor)
  i) used the word elegant
  ii) Code should be elegant, pleasing, feel good to read
  iii) Clean code is focused and exhibits close attention to detail
 
 Grady Booch (author of Object Oriented Analysis and Design With applications)
 i) Clean code is simple and direct
 ii) Well written prose
 iii) Doesn't obscure the designers intent
 iv) Straighforward lines of control
 v) Takes a readability perspective
 
 Dave Thomas(founder of OTI- grandfather of Eclipse strategy)
 i) Assert that clean code makes it easy for others to understand
 ii) Makes it easy for other people to understand it
 iii) Code without tests is not clean
 iv) Minimal
 v) Code should be literate
 
 Michael Feathers 
 i) Working effectively with legacy of code
 ii) How to care for code
 
 Ron Jefferies
 i) Clean code runs all tests
 ii) Contains no duplication
 iii) Expresses all design ideas
 iv) Minimize the number of entities
 
 Ward Cunningham (Wiki inventor)
 i) Each routine turns out to be what you expect
 ii) godfather of all that care about code
 
 9. Reading code should be easy because the ratio of reading: writing is 10:1
 10. The Boy Scoutt rule- Leave the campground cleaner than you found it


Chapter 2 - clean Code




