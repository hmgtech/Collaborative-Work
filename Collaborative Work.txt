Foreword by: James O. Coplien From: Mørdrup, Denmark.

In this foreword, there are lots many phrases that author wrote with deep meaning. Some of them I have highlighted below with my understanding.

1. “Honesty in small things is not a small thing.” Small things matter.

2. "God is in the details". Every small-small detail is important and it matters

3. "A place for everything, and everything in its place." I found this Interesting: Meaning: A piece of code should be where you expect to find it—and, if not, you should re-factor to get it there. 

4. "Cleanliness is next to godliness" Meaning: Keeping the code clean is next to a sign of spirituality or goodness. God resides in the places that are clean. “Swachhta tya prabhuta”

5. "He who is faithful in little is faithful in much." Meaning: If we do little things faithfully, then definitely we ll be able to do big things faithfully too. The true faithfulness of a person is judged the time when no one is watching him.

6. "A stitch in time saves nine." While Coding we should correct each error if it is there. It will save out lots of time. Else, we have to debug our code and it will consume much time.

7. "The early bird catches the worm." Meaning: Don’t put off until tomorrow what you can do today.

8. "An ounce of prevention is worth a pound of cure. An apple a day keeps the doctor away." Meaning:  Clean code honours the deep roots of wisdom beneath our broader culture, or our culture as it once was, or should be, and can be with attentiveness to detail.

9. “To err is human; to forgive, divine.” Meaning: It is a recommended practice in Scrum that re-factoring be  art of the concept of “Done.” Neither architecture nor clean code insist on perfection, only on honesty and doing the best we can.

10. “A bad penny always shows up.” Meaning: We abandon our code early, not because it is done, but because our value system focuses more on outward appearance than on the substance of what we deliver. This inattentiveness costs us in the end








Introduction





Chapter 1 (Hinal)
1. Code represents the details of the requirements
2. Specifying requirements in details that a machine can execute them is called programming. The specification is code
3. Bad code can bring company down
4. Wading through bad code
5. Later equals never
6. Only way to go fast is to keep the code clean
7. code-sense is important
8. Thoughts about clean code:
  Bjarne Stroustrup (C++ inventor)
  i) used the word elegant
  ii) Code should be elegant, pleasing, feel good to read
  iii) Clean code is focused and exhibits close attention to detail
 
 Grady Booch (author of Object Oriented Analysis and Design With applications)
 i) Clean code is simple and direct
 ii) Well written prose
 iii) Doesn't obscure the designers intent
 iv) Straighforward lines of control
 v) Takes a readability perspective
 
 Dave Thomas(founder of OTI- grandfather of Eclipse strategy)
 i) Assert that clean code makes it easy for others to understand
 ii) Makes it easy for other people to understand it
 iii) Code without tests is not clean
 iv) Minimal
 v) Code should be literate
 
 Michael Feathers 
 i) Working effectively with legacy of code
 ii) How to care for code
 
 Ron Jefferies
 i) Clean code runs all tests
 ii) Contains no duplication
 iii) Expresses all design ideas
 iv) Minimize the number of entities
 
 Ward Cunningham (Wiki inventor)
 i) Each routine turns out to be what you expect
 ii) godfather of all that care about code
 
 9. Reading code should be easy because the ratio of reading: writing is 10:1
 10. The Boy Scoutt rule- Leave the campground cleaner than you found it


Chapter 2 - clean Code




